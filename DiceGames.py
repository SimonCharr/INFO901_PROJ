# DiceGame.py - Exemple style "jeu de d√©s" avec le middleware Com
import os
import random
from time import sleep
from threading import Thread
from Com import Com

class DiceGameProcess(Thread):
    """
    Processus qui joue au jeu de d√©s en utilisant toutes les fonctionnalit√©s du middleware
    Reproduction de l'exemple donn√© dans le sujet original
    """
    
    def __init__(self, name):
        Thread.__init__(self)
        
        # Cr√©er le communicateur (middleware)
        self.com = Com()
        
        # R√©cup√©rer les infos
        self.nbProcess = self.com.getNbProcess()
        self.myId = self.com.getMyId()
        self.name = name
        
        self.alive = True
        self.start()
    
    def run(self):
        """
        Sc√©nario de jeu de d√©s reproduisant l'exemple du sujet
        """
        loop = 0
        print(f"üéÆ {self.name} (ID={self.myId}) entre dans le jeu")
        
        while self.alive and loop < 20:
            sleep(1)
            
            try:
                # ========== Sc√©nario du sujet original ==========
                
                if self.myId == 0:  # Utiliser l'ID r√©el, pas le nom
                    if loop == 2:
                        print(f"\n=== P{self.myId} d√©marre le jeu ===")
                        self.com.sendTo("j'appelle 2 et je te recontacte apr√®s", 1)
                    
                    elif loop == 4:
                        # Communication simple : juste envoyer, P2 va lire dans sa mailbox
                        self.com.sendTo("J'ai laiss√© un message √† 2, je le rappellerai apr√®s, on se synchronise tous et on attaque la partie ?", 2)
                        
                    elif loop == 6:
                        self.com.sendTo("2 est OK pour jouer, on se synchronise et c'est parti!", 1)
                        
                    elif loop == 8:
                        print(f"üéØ P{self.myId}: D√©but de la partie - synchronisation")
                        self.com.synchronize()
                        
                        # Phase de jeu avec section critique
                        print(f"üé≤ P{self.myId}: Demande l'acc√®s au d√©")
                        self.com.requestSC()
                        
                        if self.com.mailbox.isEmpty():
                            dice_result = random.randint(1, 6)
                            print(f"üéâ P{self.myId}: J'ai gagn√© ! D√© = {dice_result}")
                            self.com.broadcast(f"J'ai gagn√© avec un {dice_result} !")
                        else:
                            msg = self.com.mailbox.getMsg()
                            print(f"üòû P{self.myId}: P{msg.sender} a eu le jeton en premier")
                        
                        self.com.releaseSC()
                
                elif self.myId == 1:  # Utiliser l'ID r√©el
                    if loop == 3:
                        # V√©rifier les messages re√ßus
                        if not self.com.mailbox.isEmpty():
                            msg = self.com.mailbox.getMessage()
                            print(f"üìß P{self.myId}: Lu message de P{msg.sender}: '{msg.payload}'")
                    
                    elif loop == 7:
                        # Lire les messages re√ßus
                        while not self.com.mailbox.isEmpty():
                            msg = self.com.mailbox.getMessage()
                            print(f"üìß P{self.myId}: Lu message de P{msg.sender}: '{msg.payload}'")
                        
                    elif loop == 8:
                        print(f"üéØ P{self.myId}: Rejoint la synchronisation")
                        self.com.synchronize()
                        
                        # Phase de jeu avec section critique
                        print(f"üé≤ P{self.myId}: Demande l'acc√®s au d√©")
                        self.com.requestSC()
                        
                        if self.com.mailbox.isEmpty():
                            dice_result = random.randint(1, 6)
                            print(f"üéâ P{self.myId}: J'ai gagn√© ! D√© = {dice_result}")
                            self.com.broadcast(f"J'ai gagn√© avec un {dice_result} !")
                        else:
                            msg = self.com.mailbox.getMsg()
                            print(f"üòû P{self.myId}: P{msg.sender} a eu le jeton en premier")
                        
                        self.com.releaseSC()
                
                elif self.myId == 2:  # Utiliser l'ID r√©el
                    if loop == 5:
                        # Lire le message de P0 et r√©pondre
                        if not self.com.mailbox.isEmpty():
                            msg = self.com.mailbox.getMessage()
                            print(f"üìß P{self.myId}: Lu message de P{msg.sender}: '{msg.payload}'")
                            print(f"üí¨ P{self.myId}: R√©pond √† P0")
                            self.com.sendTo("OK, je suis pr√™t pour la partie !", 0)
                        
                    elif loop == 8:
                        print(f"üéØ P{self.myId}: Rejoint la synchronisation")
                        self.com.synchronize()
                        
                        # Phase de jeu avec section critique
                        print(f"üé≤ P{self.myId}: Demande l'acc√®s au d√©")
                        self.com.requestSC()
                        
                        if self.com.mailbox.isEmpty():
                            dice_result = random.randint(1, 6)
                            print(f"üéâ P{self.myId}: J'ai gagn√© ! D√© = {dice_result}")
                            self.com.broadcast(f"J'ai gagn√© avec un {dice_result} !")
                        else:
                            msg = self.com.mailbox.getMsg()
                            print(f"üòû P{self.myId}: P{msg.sender} a eu le jeton en premier")
                        
                        self.com.releaseSC()
                
                # ========== Test des autres fonctionnalit√©s ==========
                
                if loop == 12 and self.myId == 1:
                    print(f"\n=== Test communication synchrone avanc√©e ===")
                    self.com.broadcastSync("Message de fin de partie", 1)
                
                if loop == 15 and self.myId == 0:
                    print(f"\n=== Test horloge de Lamport ===")
                    old_clock = self.com.lamport_clock
                    new_clock = self.com.inc_clock()
                    print(f"üïê P{self.myId}: Horloge {old_clock} ‚Üí {new_clock}")
                    self.com.sendTo("Test final", 2)
                
                if loop == 16 and self.myId == 2:
                    # Lire les derniers messages
                    while not self.com.mailbox.isEmpty():
                        msg = self.com.mailbox.getMessage()
                        print(f"üìß P{self.myId}: Message final de P{msg.sender}: '{msg.payload}'")
                        
            except Exception as e:
                print(f"‚ùå {self.name}: Erreur loop {loop}: {e}")
                import traceback
                traceback.print_exc()
            
            loop += 1
        
        print(f"üèÅ P{self.myId}: Partie termin√©e")
    
    def stop(self):
        """Arr√™te proprement le processus"""
        self.alive = False
        
    def waitStopped(self):
        """Attend que le processus se termine"""
        self.join()

def launch_dice_game(nbProcess=3, runningTime=25):
    """
    Lance le jeu de d√©s avec le middleware Com
    """
    # Nettoyer d'abord les fichiers temporaires
    _cleanup_temp_files()
    sleep(0.1)  # Laisser le temps au nettoyage
    
    # Configurer le nombre de processus
    os.environ['NB_PROCESSES'] = str(nbProcess)
    
    print("üé≤" + "="*60)
    print(f"üéÆ JEU DE D√âS AVEC MIDDLEWARE COM ({nbProcess} JOUEURS)")
    print("üé≤" + "="*60)
    print()
    print("üìã Sc√©nario test√©:")
    print("   ‚Ä¢ Communication asynchrone (messages, broadcast)")
    print("   ‚Ä¢ Communication synchrone (sendToSync, recevFromSync)")
    print("   ‚Ä¢ Section critique distribu√©e (acc√®s au d√©)")
    print("   ‚Ä¢ Synchronisation par barri√®re")
    print("   ‚Ä¢ Horloge de Lamport")
    print("   ‚Ä¢ Bo√Æte aux lettres")
    print()
    
    # Cr√©er et d√©marrer tous les processus
    processes = []
    for i in range(nbProcess):
        process_name = f"P{i}"
        print(f"üéØ Cr√©ation du joueur {process_name}")
        processes.append(DiceGameProcess(process_name))
        sleep(0.3)
    
    print(f"\n‚úÖ {nbProcess} joueurs cr√©√©s et d√©marr√©s")
    print(f"‚è±Ô∏è Partie en cours pendant {runningTime} secondes...\n")
    
    # Laisser jouer
    try:
        sleep(runningTime)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Interruption manuelle d√©tect√©e")
    
    # Arr√™t propre
    print("\n" + "="*60)
    print("üèÅ FIN DE PARTIE")
    print("="*60)
    
    # Demander l'arr√™t
    for p in processes:
        p.stop()
    
    # Attendre la fin
    for p in processes:
        p.waitStopped()
    
    # Nettoyage
    _cleanup_temp_files()
    
    print("‚úÖ Tous les joueurs ont quitt√©")
    print("üéâ PARTIE TERMIN√âE\n")

def _cleanup_temp_files():
    """Nettoie les fichiers temporaires"""
    import tempfile
    temp_dir = tempfile.gettempdir()
    
    files_to_clean = [
        'com_process_counter.txt',
        'com_process_counter.txt.lock',
        'com_sync_counter.json',
        'com_sync_counter.json.lock'
    ]
    
    for filename in files_to_clean:
        filepath = os.path.join(temp_dir, filename)
        try:
            if os.path.exists(filepath):
                os.remove(filepath)
        except:
            pass

if __name__ == '__main__':
    print("üé≤ JEU DE D√âS - Exemple d'utilisation du middleware Com")
    print("üéØ Reproduit le sc√©nario de l'exemple donn√© dans le sujet")
    print()
    
    try:
        launch_dice_game(nbProcess=3, runningTime=40)  # 40 secondes au lieu de 30
    except Exception as e:
        print(f"‚ùå Erreur fatale: {e}")
        import traceback
        traceback.print_exc()