# Launcher.py - Version sans warnings de d√©pr√©ciation
import os
from time import sleep
from threading import Thread
from Com import Com

class Process(Thread):
    """
    Processus utilisant le middleware Com pour toutes les communications
    """
    
    def __init__(self, name):
        Thread.__init__(self)
        
        # Cr√©er le communicateur (middleware)
        self.com = Com()
        
        # R√©cup√©rer les infos du communicateur
        self.nbProcess = self.com.getNbProcess()
        self.myId = self.com.getMyId()
        self.name = name  # Utiliser l'attribut name directement
        
        self.alive = True
        self.start()
    
    def run(self):
        """
        D√©monstration compl√®te des fonctionnalit√©s du middleware
        """
        loop = 0
        print(f"üöÄ {self.name} (ID={self.myId}) d√©marr√©")
        
        while self.alive and loop < 15:  # 15 cycles pour voir toutes les fonctionnalit√©s
            sleep(1.5)  # Pause pour lisibilit√©
            
            try:
                # ========== PHASE 1: Communication asynchrone ==========
                
                if loop == 1 and self.myId == 0:
                    print(f"\n=== PHASE 1: Communication asynchrone ===")
                    self.com.broadcast("Hello tout le monde !")
                
                if loop == 2 and self.myId == 1:
                    self.com.sendTo("Message priv√© pour P2", 2)
                
                if loop == 3 and self.myId == 2:
                    # Lire les messages re√ßus
                    if not self.com.mailbox.isEmpty():
                        msg = self.com.mailbox.getMessage()
                        print(f"üìß {self.name}: lu message '{msg.payload}' de P{msg.sender}")
                
                # ========== PHASE 2: Section critique ==========
                
                if loop == 5 and self.myId == 0:
                    print(f"\n=== PHASE 2: Section critique ===")
                
                if loop == 6:
                    if self.myId == 2:  # P2 demande en premier
                        print(f"üôã {self.name}: demande section critique")
                        self.com.requestSC()
                        print(f"üî• {self.name}: TRAVAILLE en section critique")
                        sleep(2)  # Simulation du travail
                        print(f"‚úÖ {self.name}: travail termin√©")
                        self.com.releaseSC()
                
                if loop == 8:
                    if self.myId == 1:  # P1 demande ensuite
                        print(f"üôã {self.name}: demande section critique")
                        self.com.requestSC()
                        print(f"üî• {self.name}: TRAVAILLE en section critique")
                        sleep(1.5)  # Simulation du travail
                        print(f"‚úÖ {self.name}: travail termin√©")
                        self.com.releaseSC()
                
                # ========== PHASE 3: Synchronisation ==========
                
                if loop == 10:
                    if self.myId == 0:
                        print(f"\n=== PHASE 3: Synchronisation par barri√®re ===")
                    print(f"‚è∏Ô∏è {self.name}: arrive √† la barri√®re de synchronisation")
                    self.com.synchronize()
                    print(f"üéâ {self.name}: synchronisation termin√©e, on continue !")
                
                # ========== PHASE 4: Test de l'horloge ==========
                
                if loop == 12 and self.myId == 1:
                    print(f"\n=== PHASE 4: Test horloge de Lamport ===")
                    # Incr√©menter manuellement l'horloge
                    old_clock = self.com.lamport_clock
                    new_clock = self.com.inc_clock()
                    print(f"üïí {self.name}: horloge {old_clock} ‚Üí {new_clock}")
                    
                    # Envoyer un message pour voir l'effet
                    self.com.sendTo("Test horloge", 0)
                
                # ========== PHASE 5: Communication synchrone (si impl√©ment√©e) ==========
                
                if loop == 14:
                    if self.myId == 0:
                        print(f"\n=== PHASE 5: Communication synchrone ===")
                        try:
                            # Test broadcastSync si disponible
                            self.com.broadcastSync("Message synchrone de P0", 0)
                        except Exception as e:
                            print(f"‚ö†Ô∏è Communication synchrone pas encore impl√©ment√©e: {e}")
                
            except Exception as e:
                print(f"‚ùå {self.name}: Erreur loop {loop}: {e}")
            
            loop += 1
        
        print(f"üõë {self.name}: termin√©")
    
    def stop(self):
        """Arr√™te proprement le processus"""
        self.alive = False
        
    def waitStopped(self):
        """Attend que le processus se termine"""
        self.join()

def launch(nbProcess=3, runningTime=25):
    """
    Lance l'exp√©rience avec le middleware Com
    
    Args:
        nbProcess (int): Nombre de processus √† lancer (d√©faut: 3)
        runningTime (int): Dur√©e en secondes (d√©faut: 25)
    """
    # Configurer le nombre de processus via variable d'environnement
    os.environ['NB_PROCESSES'] = str(nbProcess)
    
    print("üéØ" + "="*60)
    print(f"üöÄ D√âMARRAGE DE {nbProcess} PROCESSUS AVEC MIDDLEWARE COM")
    print("üéØ" + "="*60)
    print()
    
    # Cr√©er et d√©marrer tous les processus
    processes = []
    for i in range(nbProcess):
        process_name = f"P{i}"
        print(f"üì¶ Cr√©ation du processus {process_name}")
        processes.append(Process(process_name))
        sleep(0.3)  # D√©lai entre les cr√©ations pour √©viter les conflits d'ID
    
    print(f"\n‚úÖ {nbProcess} processus cr√©√©s et d√©marr√©s")
    print(f"‚è±Ô∏è Exp√©rience en cours pendant {runningTime} secondes...\n")
    
    # Laisser tourner
    try:
        sleep(runningTime)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Interruption manuelle d√©tect√©e")
    
    # Arr√™t propre
    print("\n" + "="*60)
    print("üõë ARR√äT EN COURS...")
    print("="*60)
    
    # Demander l'arr√™t
    for p in processes:
        p.stop()
    
    # Attendre la fin
    for p in processes:
        p.waitStopped()
    
    # Nettoyage des fichiers temporaires
    _cleanup_temp_files()
    
    print("‚úÖ Tous les processus sont termin√©s")
    print("üéâ EXP√âRIENCE TERMIN√âE\n")

def _cleanup_temp_files():
    """Nettoie les fichiers temporaires cr√©√©s"""
    import tempfile
    temp_dir = tempfile.gettempdir()
    
    files_to_clean = [
        'com_process_counter.txt',
        'com_process_counter.txt.lock',
        'com_sync_counter.json',
        'com_sync_counter.json.lock'
    ]
    
    for filename in files_to_clean:
        filepath = os.path.join(temp_dir, filename)
        try:
            if os.path.exists(filepath):
                os.remove(filepath)
        except:
            pass  # Ignorer les erreurs de nettoyage

if __name__ == '__main__':
    print("üî¨ Test du middleware Com avec communication distribu√©e")
    print("üìã Fonctionnalit√©s test√©es:")
    print("   ‚Ä¢ Communication asynchrone (broadcast, sendTo)")
    print("   ‚Ä¢ Section critique distribu√©e par jeton")
    print("   ‚Ä¢ Synchronisation par barri√®re")
    print("   ‚Ä¢ Horloge de Lamport")
    print("   ‚Ä¢ Bo√Æte aux lettres")
    print("   ‚Ä¢ Attribution automatique d'IDs (sans variables de classe)")
    print()
    
    # Configuration par d√©faut
    NB_PROCESSES = 3
    RUNNING_TIME = 30  # 30 secondes pour voir toutes les phases
    
    try:
        launch(nbProcess=NB_PROCESSES, runningTime=RUNNING_TIME)
    except Exception as e:
        print(f"‚ùå Erreur fatale: {e}")
        import traceback
        traceback.print_exc()